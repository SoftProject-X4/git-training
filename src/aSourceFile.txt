public static long ackermann( long n, long m ) {
  if ( n == 0 )
    return m + 1;
  else
    if ( m == 0 )
      return ackermann( n - 1, 1 );
    else
      return ackermann( n - 1, ackermann(n, m - 1) );
}

// taken from http://www.gitta.info/Accessibiliti/de/html/Dijkstra_learningObject1.html
// calculate smallest distance between a source node and all other nodes in a graph

function Dijkstra(Graph, source):
	for each vertex v in Graph:						// Initialization
		dist[v] := infinity							// initial distance from source to vertex v is set to infinite
		previous[v] := undefined					// Previous node in optimal path from source
	dist[source] := 0								// Distance from source to source
	Q := the set of all nodes in Graph				// all nodes in the graph are unoptimized - thus are in Q
	while Q is not empty:							// main loop
		u := node in Q with smallest dist[ ]
		remove u from Q
		for each neighbor v of u:					// where v has not yet been removed from Q.
			alt := dist[u] + dist_between(u, v)
			if alt < dist[v]						// Relax (u,v)
				dist[v] := alt
				previous[v] := u
	return previous[ ]
